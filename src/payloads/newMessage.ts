/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from "io-ts";
import { WithinRangeString } from "italia-ts-commons/lib/strings";
import { FiscalCode as FiscalCodeT } from "italia-ts-commons/lib/strings";
import { MessageSubject } from "../../generated/definitions/backend/MessageSubject";
import { MessageBodyMarkdown } from "../../generated/definitions/backend/MessageBodyMarkdown";
import { PaymentData } from "../../generated/definitions/backend/PaymentData";
import { Timestamp } from "../../generated/definitions/backend/Timestamp";

/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

/**
 * Describes a message's attachment
 */

// required attributes
const MessageAttachmentR = t.interface({
  name: t.string,

  base64_content: t.string,

  mime_type: t.string
});

// optional attributes
const MessageAttachmentO = t.partial({});

export const MessageAttachment = t.intersection(
  [MessageAttachmentR, MessageAttachmentO],
  "MessageAttachment"
);

export type MessageAttachment = t.TypeOf<typeof MessageAttachment>;

/**
 * Metadata needed to process medical prescriptions.
 */

// required attributes
const MessageContentPrescription_dataR = t.interface({
  nre: WithinRangeString(15, 16)
});

// optional attributes
const MessageContentPrescription_dataO = t.partial({
  iup: WithinRangeString(1, 17),

  prescriber_fiscal_code: FiscalCodeT
});

export const MessageContentPrescription_data = t.intersection(
  [MessageContentPrescription_dataR, MessageContentPrescription_dataO],
  "MessageContentPrescription_data"
);

export type MessageContentPrescription_data = t.TypeOf<
  typeof MessageContentPrescription_data
>;

// required attributes
const MessageContentR = t.interface({
  subject: MessageSubject,

  markdown: MessageBodyMarkdown
});

// optional attributes
const MessageContentO = t.partial({
  payment_data: PaymentData,

  prescription_data: MessageContentPrescription_data,

  attachments: t.readonlyArray(MessageAttachment, "array of MessageAttachment"),

  due_date: Timestamp
});

export const MessageContent = t.intersection(
  [MessageContentR, MessageContentO],
  "MessageContent"
);

export type MessageContent = t.TypeOf<typeof MessageContent>;
